//--------------------------------------------------------------------------------------------------
// JC CLOCK
// Jason Colman 2016
//--------------------------------------------------------------------------------------------------

#include <Arduino.h>
#include "bitpattern.h"

// Bit pattern look up functions
int get_number_bitpattern(int n, int col)
{
    // Bit patterns for numbers -- in COLUMN format! Leftmost first.
    const int COLS_ROUND_LOOK[] =
    {
        // 0
        B00111100,
        B01000010,
        B01000010,
        B00111100,

        // 1
        B01111110,
        B00000000,
        B00000000,
        B00000000,

        // 2
        B00110010,
        B01001010,
        B01001010,
        B01000110,

        // 3
        B00101100,
        B01010010,
        B01010010,
        B01010010,

        // 4
        B00001000,
        B01111110,
        B00101000,
        B00011000,

        // 5
        B01001100,
        B01010010,
        B01010010,
        B01110010,

        // 6
        B00001100,
        B01010010,
        B01010010,
        B00111100,

        // 7
        B01100000,
        B01011000,
        B01000110,
        B01000000,

        // 8
        B00101100,
        B01010010,
        B01010010,
        B00101100,

        // 9
        B00111100,
        B01001010,
        B01001010,
        B00110000,
    };

    const int COLS_SQ_LOOK[] =
    {
        // 0
        B01111110,
        B01000010,
        B01111110,

        // 1
        B00000000,
        B01111110,
        B00000000,

        // 2
        B01110010,
        B01010010,
        B01011110,

        // 3
        B01111110,
        B01010010,
        B01010010,

        // 4
        B01111110,
        B00001000,
        B01111000,

        // 5
        B01011110,
        B01010010,
        B01110010,

        // 6
        B00011110,
        B01010010,
        B01111110,

        // 7
        B01111110,
        B01000000,
        B01000000,

        // 8
        B01111110,
        B01010010,
        B01111110,

        // 9
        B01111110,
        B01001010,
        B01111000,
    };
    //return COLS_ROUND_LOOK[n * 4 + col];

    // Square look is for fixed (non-scrolling) time display
    return COLS_SQ_LOOK[n * 3 + col];
}

int get_letter_bitpattern(int n, int col)
{
    // Letters have at most 5 columns, so every character has 5 values.
    const int LETTERS[] =
    {
        // COLUMN-based charset
        // a
        B00011110,
        B00101010,
        B00101010,
        B00000100,
        0,

        // b
        B00011100,
        B00100010,
        B00100010,
        B01111110,
        0,

        // c
        B00100010,
        B00100010,
        B00100010,
        B00011100,
        0,

        // d
        B01111110,
        B00100010,
        B00100010,
        B00011100,
        0,

        // e
        B00011000,
        B00101010,
        B00101010,
        B00011100,
        0,

        // f
        B01000000,
        B01010000,
        B00111110,
        B00010000,
        0,

        // g
        B00111110,
        B00100101,
        B00100101,
        B00011000,
        0,

        // h
        B00001110,
        B00010000,
        B00010000,
        B01111110,
        0,

        // i  
        B01011110,
        0,
        0,
        0,
        0,

        // j
        B01011110,
        B00000001,
        B00000001,
        0,
        0,

        // k
        B00100010,
        B00010100,
        B00001000,
        B01111110,
        0,

        // l
        B00000010,
        B01111100,
        0,
        0,
        0,

        // m 
        B00011110,
        B00100000,
        B00111110,
        B00100000,
        B00111110,

        // n
        B00011110,
        B00100000,
        B00100000,
        B00111110,
        0,

        // o
        B00011100,
        B00100010,
        B00100010,
        B00011100,
        0,

        // p
        B00011000,
        B00100100,
        B00100100,
        B00111111,
        0,

        // q
        B00111111,
        B00100100,
        B00100100,
        B00011000,
        0,

        // r
        B00100000,
        B00100000,
        B00100000,
        B00011110,
        0,

        // s
        B00100100,
        B00101010,
        B00101010,
        B00010010,
        0,

        // t
        B00000010,
        B00100010,
        B01111100,
        B00100000,
        0,

        // u
        B00111110,
        B00000010,
        B00000010,
        B00111100,
        0,

        // v
        B00110000,
        B00001100,
        B00000010,
        B00001100,
        B00110000,

        // w
        B00111100,
        B00000010,
        B00111100,
        B00000010,
        B00111100,

        // x
        B00100010,
        B00010100,
        B00001000,
        B00010100,
        B00100010,

        // y
        B00111110,
        B00000101,
        B00000101,
        B00111001,
        0,

        // z
        B00100010,
        B00110010,
        B00101010,
        B00100110,
        B00100010,
    };
    return LETTERS[n * 5 + col];
}

int get_bitpattern(char ch, int col)
{
    if (ch >= '0' && ch <= '9')
    {
        return get_number_bitpattern(ch - '0', col);
    }
    else if (ch >= 'a' && ch <= 'z')
    {
        return get_letter_bitpattern(ch - 'a', col);
    }

    if (ch == ':')
    {
        return B00010010;
    }

    // Alternative to '1' for hours 10, 11, and 12.
    if (ch == '|')
    {
        return B01111110;
    }

    return 0;
}

int get_bitpattern_width(char ch)
{
    const int NUM_WIDTH[10] = { 4, 1, 4, 4, 4, 4, 4, 4, 4, 4 };
    const int LETTER_WIDTH[26] =
    {
        4, // a
        4, // b
        4, // c
        4, // d
        4, // e
        4, // f
        4, // g
        4, // h
        1, // i
        2, // j
        4, // k
        2, // l
        5, // m
        4, // n
        4, // o
        4, // p
        4, // q
        4, // r
        4, // s
        4, // t
        4, // u
        5, // v
        5, // w
        5, // x
        4, // y
        5, // z  
    };
    if (ch >= '0' && ch <= '9')
    {
        return 3; // square style
//        return NUM_WIDTH[ch - '0'];
    }
    else if (ch >= 'a' && ch <= 'z')
    {
        return LETTER_WIDTH[ch - 'a'];
    }

    return 1;
}

